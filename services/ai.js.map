{"version":3,"file":"ai.js","sourceRoot":"","sources":["../src/services/ai.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,cAAc,CAAC,SAAe;IAC1C,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;QACjC,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;QACpC,UAAU,CAAC,SAAS,GAAG,KAAK,IAAI,EAAE;YAC9B,MAAM,QAAQ,GAAG,IAAI,YAAY,CAAC;gBAC9B,UAAU,EAAE,KAAK;aACpB,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,UAAU,CAAC,MAAqB,CAAC;YACrD,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAE9D,IAAI,KAAK,CAAC;YACV,IAAI,SAAS,CAAC,gBAAgB,KAAK,CAAC,EAAE,CAAC;gBACnC,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAEpC,IAAI,IAAI,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACvC,IAAI,KAAK,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAExC,KAAK,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;oBACxC,KAAK,CAAC,CAAC,CAAC,GAAG,cAAc,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACzD,CAAC;YACL,CAAC;iBAAM,CAAC;gBACJ,iEAAiE;gBACjE,KAAK,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACxC,CAAC;YAGD,MAAM,aAAa,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;YAChG,aAAa,CAAC,SAAS,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;oBAC/B,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;oBAEtD,aAAa,CAAC,SAAS,EAAE,CAAC;oBAE1B,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAClC,CAAC;YACL,CAAC,CAAA;YAED,aAAa,CAAC,WAAW,CAAC;gBACtB,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,KAAK;aACd,CAAC,CAAA;QAEN,CAAC,CAAC;QACF,UAAU,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAA;AACN,CAAC","sourcesContent":["export function doLocalWhisper(audioFile: Blob) {\n    return new Promise(async (resolve) => {\n        const fileReader = new FileReader();\n        fileReader.onloadend = async () => {\n            const audioCTX = new AudioContext({\n                sampleRate: 16000,\n            });\n            const arrayBuffer = fileReader.result as ArrayBuffer;\n            const audioData = await audioCTX.decodeAudioData(arrayBuffer);\n\n            let audio;\n            if (audioData.numberOfChannels === 2) {\n                const SCALING_FACTOR = Math.sqrt(2);\n\n                let left = audioData.getChannelData(0);\n                let right = audioData.getChannelData(1);\n\n                audio = new Float32Array(left.length);\n                for (let i = 0; i < audioData.length; ++i) {\n                    audio[i] = SCALING_FACTOR * (left[i] + right[i]) / 2;\n                }\n            } else {\n                // If the audio is not stereo, we can just use the first channel:\n                audio = audioData.getChannelData(0);\n            }\n\n\n            const whisperWorker = new Worker(new URL(\"./local-ai.ts\", import.meta.url), { type: \"module\" });\n            whisperWorker.onmessage = async (e) => {\n                if (e.data.type === \"transcribe\") {\n                    console.log(\"e.data.transcript\", e.data.transcription)\n\n                    whisperWorker.terminate();\n\n                    resolve(e.data.transcription);\n                }\n            }\n\n            whisperWorker.postMessage({\n                type: \"transcribe\",\n                blob: audio,\n            })\n\n        };\n        fileReader.readAsArrayBuffer(audioFile);\n    })\n}"]}